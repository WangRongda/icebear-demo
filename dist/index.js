!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},o.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){if(this.elemLink=document.createElement("a"),"object"!=typeof e)return"string"==typeof e?(this.isJSON_test(e),void console.error("不是合法的JSON")):void console.error("非法参数");e=JSON.stringify(e),this.raw=e}return e.prototype.fake_click=function(){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!1,window,0,0,0,0,0,!1,!1,!1,!1,0,null),this.elemLink.dispatchEvent(e)},e.prototype.isJSON_test=function(e){if("string"==typeof e)try{var t=JSON.parse(e);return console.log("转换成功："+t),!0}catch(t){return console.log("error："+e+"!!!"+t),!1}console.log("It is not a string!")},e.prototype.export2json=function(e){this.blob=new Blob([this.raw],{type:"application/json"}),this.elemLink.href=window.URL.createObjectURL(this.blob),this.elemLink.download=e,this.fake_click()},e.prototype.export2zip=function(e){},e}();t.default=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});new(o(0).default)({testkey:"testvalue"}).export2json("demo.json")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,